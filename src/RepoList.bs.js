// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Repo$ReactTemplate = require("./Repo.bs.js");

var Graphql_error = Caml_exceptions.create("RepoList-ReactTemplate.GetRepos.Graphql_error");

var query = "query   {\nviewer  {\nemail  \nrepositories(last: 50, orderBy: {field: STARGAZERS, direction: DESC})  {\nnodes  {\nid  \nname  \nviewerHasStarred  \nowner  {\n__typename\nlogin  \n}\n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["viewer"];
    var match$1 = Js_json.decodeObject(value$1);
    var tmp;
    if (match$1) {
      var value$2 = match$1[0];
      var value$3 = value$2["email"];
      var match$2 = Js_json.decodeString(value$3);
      var tmp$1;
      if (match$2) {
        tmp$1 = match$2[0];
      } else {
        throw Graphql_error;
      }
      var value$4 = value$2["repositories"];
      var match$3 = Js_json.decodeObject(value$4);
      var tmp$2;
      if (match$3) {
        var value$5 = match$3[0]["nodes"];
        var match$4 = Js_json.decodeNull(value$5);
        var tmp$3;
        if (match$4) {
          tmp$3 = /* None */0;
        } else {
          var match$5 = Js_json.decodeArray(value$5);
          var tmp$4;
          if (match$5) {
            tmp$4 = match$5[0].map((function (value) {
                    var match = Js_json.decodeNull(value);
                    if (match) {
                      return /* None */0;
                    } else {
                      var match$1 = Js_json.decodeObject(value);
                      var tmp;
                      if (match$1) {
                        var value$1 = match$1[0];
                        var value$2 = value$1["id"];
                        var match$2 = Js_json.decodeString(value$2);
                        var tmp$1;
                        if (match$2) {
                          tmp$1 = match$2[0];
                        } else {
                          throw Graphql_error;
                        }
                        var value$3 = value$1["name"];
                        var match$3 = Js_json.decodeString(value$3);
                        var tmp$2;
                        if (match$3) {
                          tmp$2 = match$3[0];
                        } else {
                          throw Graphql_error;
                        }
                        var value$4 = value$1["viewerHasStarred"];
                        var match$4 = Js_json.decodeBoolean(value$4);
                        var tmp$3;
                        if (match$4) {
                          tmp$3 = match$4[0];
                        } else {
                          throw Graphql_error;
                        }
                        var value$5 = value$1["owner"];
                        var match$5 = Js_json.decodeObject(value$5);
                        var tmp$4;
                        if (match$5) {
                          var value$6 = match$5[0]["login"];
                          var match$6 = Js_json.decodeString(value$6);
                          var tmp$5;
                          if (match$6) {
                            tmp$5 = match$6[0];
                          } else {
                            throw Graphql_error;
                          }
                          tmp$4 = {
                            login: tmp$5
                          };
                        } else {
                          throw Graphql_error;
                        }
                        tmp = {
                          id: tmp$1,
                          name: tmp$2,
                          viewerHasStarred: tmp$3,
                          owner: tmp$4
                        };
                      } else {
                        throw Graphql_error;
                      }
                      return /* Some */[tmp];
                    }
                  }));
          } else {
            throw Graphql_error;
          }
          tmp$3 = /* Some */[tmp$4];
        }
        tmp$2 = {
          nodes: tmp$3
        };
      } else {
        throw Graphql_error;
      }
      tmp = {
        email: tmp$1,
        repositories: tmp$2
      };
    } else {
      throw Graphql_error;
    }
    return {
            viewer: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function make() {
  return {
          query: query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables() {
  return {
          query: query,
          variables: null,
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetRepos = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetReposQuery = ReasonApollo.CreateQuery([
      query,
      parse
    ]);

var component = ReasonReact.statelessComponent("RepoList");

function make$1() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var reposQuery = make(/* () */0);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(GetReposQuery[/* make */3], [
                              /* Some */[reposQuery.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    if (result === 0) {
                                      return React.createElement("div", undefined, "Loading");
                                    } else {
                                      return React.createElement("div", undefined, "No Data");
                                    }
                                  } else if (result.tag) {
                                    var response = result[0];
                                    var match = response.viewer.repositories.nodes;
                                    return React.createElement("div", undefined, "Repos starred by: " + response.viewer.email, React.createElement("ul", undefined, match ? match[0].map((function (repo) {
                                                            if (repo) {
                                                              var repo$1 = repo[0];
                                                              return ReasonReact.element(/* None */0, /* None */0, Repo$ReactTemplate.make(repo$1.name, repo$1.owner.login, repo$1.viewerHasStarred, repo$1.id, /* array */[]));
                                                            } else {
                                                              return null;
                                                            }
                                                          })) : null));
                                  } else {
                                    return React.createElement("div", undefined, String(result[0]));
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.GetRepos = GetRepos;
exports.GetReposQuery = GetReposQuery;
exports.component = component;
exports.make = make$1;
/* GetReposQuery Not a pure module */
