// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Issue$ReactTemplate = require("./Issue.bs.js");

var Graphql_error = Caml_exceptions.create("IssueList-ReactTemplate.GetIssues.Graphql_error");

var query = "query Issues($owner: String!, $name: String!)  {\nrepository(owner: $owner, name: $name)  {\nissues(first: 50, states: [OPEN], orderBy: {direction: DESC, field: UPDATED_AT})  {\nnodes  {\ntitle  \n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["repository"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0]["issues"];
        var match$3 = Js_json.decodeObject(value$2);
        var tmp$2;
        if (match$3) {
          var value$3 = match$3[0]["nodes"];
          var match$4 = Js_json.decodeNull(value$3);
          var tmp$3;
          if (match$4) {
            tmp$3 = /* None */0;
          } else {
            var match$5 = Js_json.decodeArray(value$3);
            var tmp$4;
            if (match$5) {
              tmp$4 = match$5[0].map((function (value) {
                      var match = Js_json.decodeNull(value);
                      if (match) {
                        return /* None */0;
                      } else {
                        var match$1 = Js_json.decodeObject(value);
                        var tmp;
                        if (match$1) {
                          var value$1 = match$1[0]["title"];
                          var match$2 = Js_json.decodeString(value$1);
                          var tmp$1;
                          if (match$2) {
                            tmp$1 = match$2[0];
                          } else {
                            throw Graphql_error;
                          }
                          tmp = {
                            title: tmp$1
                          };
                        } else {
                          throw Graphql_error;
                        }
                        return /* Some */[tmp];
                      }
                    }));
            } else {
              throw Graphql_error;
            }
            tmp$3 = /* Some */[tmp$4];
          }
          tmp$2 = {
            nodes: tmp$3
          };
        } else {
          throw Graphql_error;
        }
        tmp$1 = {
          issues: tmp$2
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            repository: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(owner, name, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "owner",
                  owner
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var owner = variables.owner;
  var name = variables.name;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "owner",
                  owner
                ],
                /* :: */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetIssues = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetIssuesQuery = ReasonApollo.CreateQuery([
      query,
      parse
    ]);

var component = ReasonReact.statelessComponent("IssueList");

function make$1(name, owner, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var issuesQuery = make(owner, name, /* () */0);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(GetIssuesQuery[/* make */3], [
                              /* Some */[issuesQuery.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    if (result === 0) {
                                      return React.createElement("div", undefined, "Loading");
                                    } else {
                                      return React.createElement("div", undefined, "No Data");
                                    }
                                  } else if (result.tag) {
                                    var match = result[0].repository;
                                    var tmp;
                                    if (match) {
                                      var match$1 = match[0].issues.nodes;
                                      tmp = match$1 ? match$1[0].map((function (issue) {
                                                if (issue) {
                                                  return ReasonReact.element(/* None */0, /* None */0, Issue$ReactTemplate.make(issue[0].title, /* array */[]));
                                                } else {
                                                  return null;
                                                }
                                              })) : null;
                                    } else {
                                      tmp = null;
                                    }
                                    return React.createElement("ul", undefined, tmp);
                                  } else {
                                    return React.createElement("div", undefined, String(result[0]));
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.GetIssues = GetIssues;
exports.GetIssuesQuery = GetIssuesQuery;
exports.component = component;
exports.make = make$1;
/* GetIssuesQuery Not a pure module */
